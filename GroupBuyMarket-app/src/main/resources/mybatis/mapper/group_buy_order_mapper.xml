<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.ant0n.gbm.infrastructure.dao.IGroupBuyOrderDao">

    <resultMap id="dataMap" type="cn.ant0n.gbm.infrastructure.dao.po.GroupBuyOrder">
        <id column="id" property="id"/>
        <result column="team_id" property="teamId"/>
        <result column="activity_id" property="activityId"/>
        <result column="source" property="source"/>
        <result column="channel" property="channel"/>
        <result column="original_price" property="originalPrice"/>
        <result column="deduction_price" property="deductionPrice"/>
        <result column="pay_price" property="payPrice"/>
        <result column="target_count" property="targetCount"/>
        <result column="complete_count" property="completeCount"/>
        <result column="lock_count" property="lockCount"/>
        <result column="status" property="status"/>
        <result column="start_time" property="startTime"/>
        <result column="end_time" property="endTime"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
    </resultMap>

    <select id="queryExistGroupBuyOrderList" resultMap="dataMap">
        select team_id, target_count, lock_count, start_time, end_time from group_buy_order
        where activity_id = #{activityId} and status = 0
    </select>

    <insert id="insert" parameterType="cn.ant0n.gbm.infrastructure.dao.po.GroupBuyOrder">
        insert into group_buy_order
        (team_id, activity_id, source, channel,original_price, deduction_price,
         pay_price, target_count, complete_count, lock_count, status, start_time, end_time)
        values (#{teamId}, #{activityId}, #{source}, #{channel}, #{originalPrice}, #{deductionPrice}, #{payPrice},
                #{targetCount}, #{completeCount}, #{lockCount}, #{status}, #{startTime}, #{endTime})
    </insert>

    <update id="joinGroupUpdate" parameterType="cn.ant0n.gbm.infrastructure.dao.po.GroupBuyOrder">
        update group_buy_order
        set
        lock_count = lock_count + 1
        where team_id = #{teamId} and status = 0 and target_count - lock_count > 0
    </update>

    <select id="queryGroupBuyOrder" resultMap="dataMap">
        select team_id, activity_id, source, channel, original_price, deduction_price,
               pay_price, target_count, complete_count, status, start_time, end_time from group_buy_order
        where team_id = #{teamId}
    </select>

    <update id="incrCompleteCount">
        update group_buy_order
        set
            complete_count = complete_count + 1
        where
            team_id = #{teamId}
    </update>

    <update id="update2Complete">
        update group_buy_order
        set
            status = 1,
            update_time = now()
        where
            team_id = #{teamId} and status = 0
    </update>


    <update id="cancelOrder">
        update group_buy_order
        set
            status = 2,
            update_time = now()
        where
            team_id = #{teamId} and status = 0
    </update>

    <select id="queryParticipateCountByAcitivityId" parameterType="java.lang.String" resultType="java.lang.Integer">
        select sum(lock_count) from group_buy_order
        where activity_id = #{activityId}
    </select>

    <select id="queryCompleteGroupCount" parameterType="java.lang.String" resultType="java.lang.Integer">
        select count(id) from group_buy_order
        where activity_id = #{activityId} and status = 1
    </select>

    <select id="queryInProgressGroupCount" parameterType="java.lang.String" resultType="java.lang.Integer">
        select count(id) from group_buy_order
        where activity_id = #{activityId} and status = 0
    </select>

    <select id="queryGroupBuyProgress" resultMap="dataMap">
        select team_id, target_count, complete_count, lock_count, start_time, end_time
        from group_buy_order
        where activity_id = #{activityId} and status = 0 and target_count > lock_count and end_time > now()
    </select>



</mapper>